.data
array: .space 50
enter: .asciiz "String fromat -x:y or x:y where(x,y are some binary strings) : "
msg1: .asciiz "Fraction part (23 bits): "
msg3: .asciiz "Exponent part (8 bits): "
result: .asciiz "finished\n"
storing: .word 100
signbit: .asciiz "Sign bit:" 
check: .asciiz ":Rem\n"
msg5: .asciiz "  ,  "
.text
.globl main
main:
        li $v0,4
        la $a0,enter
        syscall
	li $v0,8
	la $a0,array
	li $a1,50
	syscall
	move $s0,$a0
	li $t0,0
	
	li $s1,0	
	li $s2,0
	li $s3,0
	li $s4,8
	li $s5,23
	la $s7,storing
	li $v0,4
	la $a0,signbit
	syscall
	li $v0,1
	add $a0,$zero,$zero
	syscall
	li $v0,4
	la $a0,msg5
	syscall
loop:
	lb $t1,0($s0)
	beq $t1,49,rema1
	beq $t1,48,addit
	addi $s0,$s0,1
	j loop
addit:
	addi $t0,$t0,1
	addi $s0,$s0,1
	j loop
rema1:	
	addi $s0,$s0,1
	la $a0,msg1
	li $v0,4
	syscall
	j rema
rema:
	addi $s6,$s0,1
	lb $t1,0($s6)
	beqz $t1,printrema
	lb $t1,0($s0)
	li $v0,11
	move $a0,$t1
	syscall
	addi $s0,$s0,1
	addi $s5,$s5,-1	
	j rema
printrema3:
	la $a0,msg5
	li $v0,4
	syscall
	j exit
printrema:
	beqz $s5,printrema3
	add $a0,$zero,$zero
	li $v0,1
	syscall
	addi $s5,$s5,-1
	j printrema
exit:
	li $v0,4
	la $a0,msg3
	syscall
	
	li $s3,127
	sub $s3,$s3,$t0
	j convert
convert:
	beqz $s3,loop3#running while loop
	rem $t3,$s3,2
	sll $t2,$s1,2
	add $t2,$t2,$s7
	sw $t3,0($t2)
	addi $s1,$s1,1
	addi $s2,$s2,1
	div $s3,$s3,2
	j convert
loop3:
	sub $s4,$s4,$s2
	j printz
printz:
	beqz $s4,loop2
	add $a0,$zero,$zero
	li $v0,1
	syscall
	subi $s4,$s4,1
	j printz
loop2:
	
	addi $s2,$s2,-1
	sll $t2,$s2,2
	add $t2,$t2,$s7
	lw $t3,0($t2)
	li $v0,1
	move $a0,$t3
	syscall
	beqz $s2,exit1
	j loop2
exit1:
	li $v0,10
	syscall
